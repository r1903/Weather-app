{"version":3,"sources":["components/Weather.js","components/Form.js","components/Titles.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","this","state","temp","city","country","humidity","description","error","className","Math","round","parseFloat","React","Component","Form","onSubmit","getWeather","type","name","placeholder","Titles","App","e","preventDefault","target","elements","value","fetch","process","then","response","ok","Error","statusText","json","data","setState","main","sys","weather","catch","err","message","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uOAoBeA,G,qLAfNC,GAAO,IAAD,EAC2CC,KAAKD,MAAME,MAA1DC,EADI,EACJA,KAAKC,EADD,EACCA,KAAKC,EADN,EACMA,QAAQC,EADd,EACcA,SAASC,EADvB,EACuBA,YAAYC,EADnC,EACmCA,MAC5C,OACE,yBAAKC,UAAU,iBACZL,GAAQC,GAAW,wCAAcD,EAAd,IAAqBC,GACxCF,GAAS,2CAAiBO,KAAKC,MAAMC,WAAWT,GAAM,QAA7C,SACTG,GAAa,wCAAcA,GAC3BC,GAAgB,0CAAgBA,GAChCC,GAAU,uBAAGC,UAAU,kBAAkBD,Q,GAV9BK,IAAMC,YCYbC,EAZF,SAACf,GACZ,OACI,0BAAMgB,SAAUhB,EAAMiB,WAAYR,UAAU,aACxC,2BAAOS,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,iDCKKC,EAVA,WACb,OACE,yBAAKZ,UAAU,cACf,gDCkEWa,E,2MAhEbpB,MAAQ,CACNC,KAAK,GACLC,KAAK,GACLC,QAAQ,GACRC,SAAS,GACTC,YAAY,GACZC,MAAM,I,EAGRS,WAAc,SAACM,GACbA,EAAEC,iBACF,IAAMpB,EAAOmB,EAAEE,OAAOC,SAAStB,KAAKuB,MAC9BtB,EAAUkB,EAAEE,OAAOC,SAASrB,QAAQsB,MACvCvB,GAAQC,EACTuB,MAAM,oDAAD,OAAqDxB,EAArD,YAA6DC,EAA7D,kBAA8EwB,qCAClFC,MAAK,SAAAC,GACA,IAAKA,EAASC,GAAM,MAAMC,MAAMF,EAASG,YACzC,OAAOH,EAASI,UAErBL,MAAK,SAAAM,GACA,EAAKC,SAAS,CACdlC,KAAKiC,EAAKE,KAAKnC,KACfC,KAAKgC,EAAKjB,KACVd,QAAQ+B,EAAKG,IAAIlC,QACjBC,SAAS8B,EAAKE,KAAKhC,SACnBC,YAAY6B,EAAKI,QAAQ,GAAGjC,YAC5BC,MAAM,QAGXiC,OAAM,SAAAC,GAAG,OAAE,EAAKL,SAAS,CAAClC,KAAK,GAC1BC,KAAK,GACLC,QAAQ,GACRC,SAAS,GACTC,YAAY,GACZC,MAAM,mBAAD,OAAoBkC,EAAIC,cAI7B,EAAKN,SAAS,CACdlC,KAAK,GACLC,KAAK,GACLC,QAAQ,GACRC,SAAS,GACTC,YAAY,GACZC,MAAM,4C,wEAOd,OACA,yBAAKC,UAAU,WACd,yBAAKA,UAAU,QACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMQ,WAAYhB,KAAKgB,aACvB,kBAAC,EAAD,CAASf,MAAOD,KAAKC,c,GAzDVW,IAAMC,WCKJ8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,iB","file":"static/js/main.642de63e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass Weather extends React.Component{\r\n\r\n  render(props){\r\n    const {temp,city,country,humidity,description,error}= this.props.state;\r\n      return(\r\n        <div className=\"weather__info\">\r\n          {city && country && <p>Location :{city},{country}</p>}\r\n          {temp &&  <p>Temperature :{Math.round(parseFloat(temp)-273.15)}Â°C</p>}\r\n          {humidity &&  <p>Humidity :{humidity}</p>}\r\n          {description &&  <p>Descrition :{description}</p>}\r\n          {error &&  <p className=\"weather__error\">{error}</p>}\r\n        </div>\r\n      )\r\n  }\r\n} \r\n\r\n\r\nexport default Weather;","import React from 'react';\r\n\r\n\r\nconst Form = (props) => {\r\n  return(\r\n      <form onSubmit={props.getWeather} className=\"form_info\">\r\n          <input type=\"text\" name=\"city\" placeholder=\"City...\"></input>\r\n          <input type=\"text\" name=\"country\" placeholder=\"Country...\"></input>\r\n          <button>Get Weather</button>\r\n      </form>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default Form;","import React from 'react';\r\n\r\n\r\nconst Titles = () => {\r\n  return(\r\n    <div className=\"title_info\">\r\n    <h1>Weather Finder</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default Titles;","import React from 'react';\nimport './App.css';\nimport Weather from \"./components/Weather\";\nimport Form from \"./components/Form\";\nimport Titles from \"./components/Titles\";\n\n\nclass App extends React.Component{\n  state = {\n    temp:\"\",\n    city:\"\",\n    country:\"\",\n    humidity:\"\",\n    description:\"\",\n    error:\"\"\n  }\n  \n  getWeather =  (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    if(city && country){\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${process.env.REACT_APP_API_KEY}`)\n      .then(response => {\n            if (!response.ok) { throw Error(response.statusText) }\n            return response.json()\n          })\n      .then(data => {\n            this.setState({\n            temp:data.main.temp,\n            city:data.name,\n            country:data.sys.country,\n            humidity:data.main.humidity,\n            description:data.weather[0].description,\n            error:\"\"\n            }) \n          })\n      .catch(err=>this.setState({temp:\"\",\n            city:\"\",\n            country:\"\",\n            humidity:\"\",\n            description:\"\",\n            error:`City or Country ${err.message}`}\n            ))\n    }\n    else {\n            this.setState({\n            temp:\"\",\n            city:\"\",\n            country:\"\",\n            humidity:\"\",\n            description:\"\",\n            error:\"Please enter the City and Country name\"\n          })\n    } \n  }\n    \n  \n  render() {\n    return(\n    <div className=\"wrapper\">\n     <div className=\"main\">\n       <Titles/>\n       <Form getWeather={this.getWeather}/>\n       <Weather state={this.state}/>\n     </div>\n    </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}